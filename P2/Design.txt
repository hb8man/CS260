QUEUE DESIGN:

    int generateRandNum() {
        return randNum
    }

    class Queue {
    public:
        std::queue<int> queueInQuestion; // We need to have a collection to act as the queue

        void enqueue() {
            queueInQuestion.push() // Push to back of queue
        }

        void dequeue() {
            queueInQuestion.pop() // Dequeue first element 
        }

        void displayQueueData() { // Prints out first and last elements of queue.
            if queueInQuestion != empty {
                cout << queueInQuestion.firstElement;
                cout << queueInQuestion.lastElement;
            } else {
                cout << "The queue is empty";
            }

        }
    };

LIST DESIGN:

Struct Node {
    data variable; //Stores value of Node
    Node* next; //Pointer to next node
    Initialize() {}
}

Class LinkedList {
private:
    Node* head; // Pointer to the head of the list

public:
    void insert() {};
    void delete() {};
    std::string printOut(LinkedList list) {};
}




